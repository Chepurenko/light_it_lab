!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const r=21,o=21,a=function(e,t){if(e>=0&&e<r&&t>=0&&t<o)return!0};let i=function(e){return document.getElementById(e)},s=[],c=[],l=[0,0];function d(){for(let e=0;e<r;e++){s[e]=[];for(let t=0;t<o;t++){s[e][t]="pass";let n=i("maze").appendChild(document.createElement("div"));n.className="block",n.setAttribute("id",e+"-"+t)}}i("0-0").className="block start",i("20-20").className="block finish"}function u(){i("maze").innerHTML=""}n(5);window.onload=void(window.onload=d()),i("maze").addEventListener("click",e=>{let t=e.target;i("maze").querySelectorAll(".block").forEach(function(e){e.removeAttribute("data-index")}),i("maze").querySelectorAll(".road").forEach(function(e){e.classList.remove("road")}),"0-0"!==t.id&&"20-20"!==t.id&&("block"===t.className?t.className="block wall":t.className="block")}),i("buttons-block").addEventListener("click",e=>{let t=e.target;if("BUTTON"===t.tagName)switch(t.id){case"run":!function(){let e=[];function t(t,n){a(t+1,n)&&void 0===i(t+1+"-"+n).dataset.index&&"block wall"!==i(t+1+"-"+n).className&&(e.push([t+1,n]),i(t+1+"-"+n).dataset.index=+i(t+"-"+n).dataset.index+1),a(t-1,n)&&void 0===i(t-1+"-"+n).dataset.index&&"block wall"!==i(t-1+"-"+n).className&&(e.push([t-1,n]),i(t-1+"-"+n).dataset.index=+i(t+"-"+n).dataset.index+1),a(t,n+1)&&void 0===i(t+"-"+(n+1)).dataset.index&&"block wall"!==i(t+"-"+(n+1)).className&&(e.push([t,n+1]),i(t+"-"+(n+1)).dataset.index=+i(t+"-"+n).dataset.index+1),a(t,n-1)&&void 0===i(t+"-"+(n-1)).dataset.index&&"block wall"!==i(t+"-"+(n-1)).className&&(e.push([t,n-1]),i(t+"-"+(n-1)).dataset.index=+i(t+"-"+n).dataset.index+1)}for(i("0-0").dataset.index="0",t(0,0);0!==e.length;)e.forEach(function(n){e.splice(e.indexOf(n),1),t(n[0],n[1])});let n=[];function r(e,t){a(e+1,t)&&"block road"!==i(e+1+"-"+t).className&&"0-0"!==i(e+"-"+t).id&&void 0!==i(e+1+"-"+t).dataset.index&&+i(e+1+"-"+t).dataset.index==+i(e+"-"+t).dataset.index-1&&(n.push([e+1,t]),i(e+1+"-"+t).className="block road"),a(e-1,t)&&"block road"!==i(e-1+"-"+t).className&&"0-0"!==i(e+"-"+t).id&&void 0!==i(e-1+"-"+t).dataset.index&&+i(e-1+"-"+t).dataset.index==+i(e+"-"+t).dataset.index-1&&(n.push([e-1,t]),i(e-1+"-"+t).className="block road"),a(e,t+1)&&"block road"!==i(e+"-"+(t+1)).className&&"0-0"!==i(e+"-"+t).id&&void 0!==i(e+"-"+(t+1)).dataset.index&&+i(e+"-"+(t+1)).dataset.index==+i(e+"-"+t).dataset.index-1&&(n.push([e,t+1]),i(e+"-"+(t+1)).className="block road"),a(e,t-1)&&"block road"!==i(e+"-"+(t-1)).className&&"0-0"!==i(e+"-"+t).id&&void 0!==i(e+"-"+(t-1)).dataset.index&&+i(e+"-"+(t-1)).dataset.index==+i(e+"-"+t).dataset.index-1&&(n.push([e,t-1]),i(e+"-"+(t-1)).className="block road")}for(r(20,20);0!==n.length;)n.forEach(function(e){n.splice(n.indexOf(e),1),r(e[0],e[1])});void 0===i("20-20").dataset.index&&alert("maze does not have a passage")}();break;case"clear":u(),d();break;case"generate":u(),d(),function(){function e(e,t){s[e][t]="pass",i(e+"-"+t).className="block",a(e+1,t)&&"wall"===s[e+1][t]&&c.push([e+1,t,[e,t]]),a(e-1,t)&&"wall"===s[e-1][t]&&c.push([e-1,t,[e,t]]),a(e,t+1)&&"wall"===s[e][t+1]&&c.push([e,t+1,[e,t]]),a(e,t-1)&&"wall"===s[e][t-1]&&c.push([e,t-1,[e,t]])}for(s.forEach(function(e){for(let t=0;t<e.length;t++)e[t]="wall"}),document.querySelectorAll(".block").forEach(function(e){e.className="block wall"}),e(l[0],l[1]);0!==c.length;){let t=c[Math.floor(Math.random()*c.length)],n=t[2],r=[n[0]+2*(t[0]-n[0]),n[1]+2*(t[1]-n[1])];a(r[0],r[1])&&("pass"===s[r[0]][r[1]]?c.splice(c.indexOf(t),1):(s[t[0]][t[1]]="pass",i(t[0]+"-"+t[1]).className="block",e(r[0],r[1])))}}()}})},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,l=0,d=[],u=n(1);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(x(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(x(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function b(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),v(t,e.attrs),h(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function x(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=l++;n=c||(c=m(t)),r=w.bind(null,n,i,!1),o=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){b(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){b(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return f(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&f(p(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete a[s.id]}}}};var g,y=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"#maze\r\n{\r\n  margin-top: 50px;\r\n\t/*border-style: solid;*/\r\n  height: 445px;\r\n  width: 445px;\r\n}\r\n.block\r\n{\r\n\tfloat: left;\r\n\theight: 20px;\r\n\twidth: 20px;\r\n  border: .5px dashed #000;\r\n}\r\n.wall\r\n{\r\n\tbackground-color: #000;\r\n}\r\n.road {\r\n  background: silver;\r\n}\r\n.start\r\n{\r\n  border-left: none;\r\n  /*position: relative;*/\r\n}\r\n/*.me:after\r\n{\r\n  background-color: #23afee;\r\n  border-radius: 0%;\r\n  content: '';\r\n  height: 10px;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 10px;\r\n}*/\r\n.finish\r\n{\r\n border-right: none;\r\n}\r\n#complete\r\n{\r\n  display: none;\r\n  height: 515px;\r\n  position: absolute;\r\n  top: 50px;\r\n  width: 515px;\r\n  z-index: -1;\r\n  background-color: red;\r\n}\r\n",""])},function(e,t,n){var r=n(4);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,